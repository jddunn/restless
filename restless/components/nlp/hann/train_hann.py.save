import os, sys

# make dep imports work when running as lib / in high-levels scripts

PACKAGE_PARENT = '../../../..'
SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))

# sys.path.append( os.path.join( os.path.dirname(__file__), os.path.pardir ) )
try:
    from restless.components.nlp.hann.hann import HierarchicalAttentionNetwork
    from restless.components.nlp.hann.hann import (
        DEFAULT_DATA_PATH,
        DEFAULT_TRAINING_DATA_PATH,
        DEFAULT_MODEL_PATH,
    )
    from restless.components.nlp.hann.feature_keys import pe_headers_feature_keys
    from restless.components.utils import stats
except Exception as e:
    from hann import HierarchicalAttentionNetwork
    from hann import (
        DEFAULT_DATA_PATH,
        DEFAULT_TRAINING_DATA_PATH,
        DEFAULT_MODEL_PATH,
    )
    from . import pe_headers_feature_keys
    from ...utils import stats

def train_hann_model(
    feature_keys: dict,
    training_fp: str,
    model_save: bool = True,
    model_fp: str = DEFAULT_MODEL_PATH,
) -> object:
    """
    Trains a hierarchical attention network model from a CSV or text file.

    Args:
        feature_keys (dict): Dictionary containing features and their
            properties mapped from the training file.
        training_fp (str): Filepath to read dataset from into df;
             must be CSV or text.
        save_model (bool, optional): Whether to save trained model to disk.
        model_fp (str, optional): Filepath to save the model to, if
            model_save is set to True. Will default if not specified.

    Returns:
        object: Trained model.
    """
    # For now the PE header / metadata model will be our default one
    # but eventually we'll have multiple classifiers built using the HANN model
    hann = HierarchicalAttentionNetwork()
    hann.feature_keys = feature_keys
    print("Training fp: ", training_fp, "with feature keys: ", hann.feature_keys)
    model = hann.read_and_train_data(training_fp)
    print("Training successful!")
    if save_model:
        model.save(model_fp)
    return model


if __name__ == "__main__":
    get_features_corr(features)
    train_hann_model(pe_headers_feature_keys, DEFAULT_TRAINING_DATA_PATH)
